<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                              http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>au.gov.nla</groupId>
    <artifactId>flint</artifactId>
    <packaging>pom</packaging>
    <version>0.9.2-RELEASE</version>
    <name>Flint - a File/Format validation tool</name>

    <modules>
        <!-- the core module a.k.a the engine -->
        <module>flint-core</module>
        <!-- all implementations of the api's interfaces -->
        <module>flint-pdf</module>
        <module>flint-epub</module>
        <module>flint-mobi</module>
        <!-- a collection of third-party tools wrapped in a standard way of accessing them -->
        <module>flint-toolwrappers</module>
        <!-- module to register all known format implementations -->
        <module>flint-register</module>

        <!-- the following are different use-case specific entries to flint -->
        <!-- command line interface -->
        <module>flint-cli</module>
        <!-- javafx UI, now activated by profile-->
        <!-- <module>flint-fx</module> -->
        <!-- to run on a hadoop cluster -->
        <module>flint-hadoop</module>
        <!-- an api to help extending a format's hadoop capabilities -->
        <module>flint-hadoop-api</module>
    </modules>
<!--
	<profiles>
		<profile>
			<id>jdk8plus</id>
			<activation>
				<jdk>1.8</jdk>
			</activation>
			<modules>
				<module>flint-fx</module>
			</modules>
		</profile>
	</profiles>
	-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>11</java.version>

        <mainclass>au.gov.nla.flint.FLint</mainclass>

        <!-- managed versions -->
        <argparse4j.version>0.9.0</argparse4j.version>
        <bcprov-jdk15on.version>1.70</bcprov-jdk15on.version>
        <commons-lang3.version>3.12.0</commons-lang3.version>
        <controlsfx.version>8.20.7</controlsfx.version>
        <cucumber.version>7.11.2</cucumber.version>
        <dptutils.version>0.0.3-SNAPSHOT</dptutils.version>
        <epubcheck.version>5.0.0</epubcheck.version>
        <fest-assert.version>1.4</fest-assert.version>
        <guava.version>31.1-jre</guava.version>
        <hadoop-client.version>3.3.5</hadoop-client.version>
        <itextpdf.version>5.5.13.3</itextpdf.version>
        <jackson.version>2.14.2</jackson.version>
        <!-- <javafx.version>11</javafx.version> -->
        <jakarta.websocket-api.version>2.1.0</jakarta.websocket-api.version>
        <jboss-websocket-api_1.0_spec>1.0.0.Final</jboss-websocket-api_1.0_spec>
        <jetty.version>9.4.51.v20230217</jetty.version>
        <jhove.version>1.26.1</jhove.version>
        <junit.version>4.13.2</junit.version>
        <maven-assembly-plugin.version>3.5.0</maven-assembly-plugin.version>
        <maven-compiler-plugin.version>3.10.1</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>3.0.0</maven-surefire-plugin.version>
        <maven-war-plugin.version>3.3.2</maven-war-plugin.version>
        <mrunit.version>1.1.0</mrunit.version>
        <!-- Moving to preflight/pdfbox 2+ causes validation by uk.bl.dpt.utils.schematron.Validator to
        spit out a saxon error complaining about invalid XML -->
        <pdfbox.version>1.8.17</pdfbox.version>
        <reflections.version>0.10.2</reflections.version>
        <slf4j.version>2.0.7</slf4j.version>
        <tika-parsers.version>2.7.0</tika-parsers.version>
        <xz.version>1.9</xz.version>
    </properties>

    <distributionManagement>
        <repository>
            <id>nla-public-releases</id>
            <url>https://dev.nla.gov.au/nexus/content/repositories/nla-public/</url>
        </repository>
        <snapshotRepository>
            <id>nla-public-snapshots</id>
            <url>https://dev.nla.gov.au/nexus/content/repositories/nla-public-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-maven-plugin</artifactId>
                    <version>${jetty.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${maven-war-plugin.version}</version>
                    <configuration>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <dependencyManagement>
        <dependencies>
            <!-- utility collection by the DBT@BL -->
            <dependency>
                <groupId>uk.bl.dpt</groupId>
                <artifactId>dptutils</artifactId>
                <version>${dptutils.version}</version>
            </dependency>

            <!-- other utilities -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang3.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>

            <!-- testing -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.cucumber</groupId>
                <artifactId>cucumber-core</artifactId>
                <version>${cucumber.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.cucumber</groupId>
                <artifactId>cucumber-java</artifactId>
                <version>${cucumber.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.cucumber</groupId>
                <artifactId>cucumber-junit</artifactId>
                <version>${cucumber.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.mrunit</groupId>
                <artifactId>mrunit</artifactId>
                <version>${mrunit.version}</version>
                <classifier>hadoop2</classifier>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.easytesting</groupId>
                <artifactId>fest-assert</artifactId>
                <version>${fest-assert.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- need reflections to get Format implementations at runtime -->
            <dependency>
                <groupId>org.reflections</groupId>
                <artifactId>reflections</artifactId>
                <version>${reflections.version}</version>
            </dependency>
            <!-- parse command line arguments in a shiny way -->
            <dependency>
                <groupId>net.sourceforge.argparse4j</groupId>
                <artifactId>argparse4j</artifactId>
                <version>${argparse4j.version}</version>
            </dependency>

            <!-- logging -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j.version}</version>
            </dependency>

            <!-- java-fx addons -->
            <!--
            <dependency>
                <groupId>org.controlsfx</groupId>
                <artifactId>controlsfx</artifactId>
                <version>${controlsfx.version}</version>
            </dependency>
            <dependency>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-controls</artifactId>
                <version>${javafx.version}</version>
            </dependency>
            -->

            <!-- websocket jsr-356 api)-->
            <dependency>
                <groupId>jakarta.websocket</groupId>
                <artifactId>jakarta.websocket-api</artifactId>
                <version>${jakarta.websocket-api.version}</version>
            </dependency>
            <!-- jetty implementation of server side jsr-356 -->
            <dependency>
                <groupId>org.eclipse.jetty.websocket</groupId>
                <artifactId>websocket-server</artifactId>
                <version>${jetty.version}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.jetty.websocket</groupId>
                <artifactId>javax-websocket-client-impl</artifactId>
                <version>${jetty.version}</version>
            </dependency>

            <!-- json en/de-coding -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.pdfbox</groupId>
                <artifactId>preflight</artifactId>
                <version>${pdfbox.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>commons-io</groupId>
                        <artifactId>commons-io</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!-- epubcheck defunct until a new version comes out-->
            <dependency>
                <groupId>org.w3c</groupId>
                <artifactId>epubcheck</artifactId>
                <version>${epubcheck.version}</version>
            </dependency>
            <dependency>
                <groupId>org.openpreservation.jhove</groupId>
                <artifactId>jhove-core</artifactId>
                <version>${jhove.version}</version>
            </dependency>
            <!-- note that to use jhove2 a different method of making a single jar
                is required, or just use the standalone jar and dependencies -->
            <!-- <dependency> <groupId>org.jhove2</groupId> <artifactId>jhove2</artifactId>
                <version>2.1.0</version> </dependency> -->
            <!-- Note that iText is licensed under AGPL3 -->
            <dependency>
                <groupId>com.itextpdf</groupId>
                <artifactId>itextpdf</artifactId>
                <version>${itextpdf.version}</version>
            </dependency>
            <!-- bouncycastle libs for itext -->
            <dependency>
                <groupId>org.bouncycastle</groupId>
                <artifactId>bcprov-jdk15on</artifactId>
                <version>${bcprov-jdk15on.version}</version>
                <type>jar</type>
                <scope>compile</scope>
                <optional>false</optional>
            </dependency>
            <dependency>
                <groupId>org.bouncycastle</groupId>
                <artifactId>bcpkix-jdk15on</artifactId>
                <version>${bcprov-jdk15on.version}</version>
                <type>jar</type>
                <scope>compile</scope>
                <optional>false</optional>
            </dependency>
            <!-- end of bouncycastle libs -->
            <dependency>
                <groupId>org.apache.tika</groupId>
                <artifactId>tika-core</artifactId>
                <version>${tika-parsers.version}</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.tika</groupId>
                <artifactId>tika-parsers-standard-package</artifactId>
                <version>${tika-parsers.version}</version>
                <scope>compile</scope>
            </dependency>
            <!-- this is here to stop tika complaining about noclassdeffound see: https://issues.apache.org/jira/browse/COMPRESS-221 -->
            <dependency>
                <groupId>org.tukaani</groupId>
                <artifactId>xz</artifactId>
                <version>${xz.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.hadoop</groupId>
                <artifactId>hadoop-client</artifactId>
                <version>${hadoop-client.version}</version>
                <scope>provided</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

	<organization>
		<name>British Library / SCAPE Project</name>
		<url>www.scape-project.eu</url>
	</organization>

	<description>A tool to detect drm</description>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
			<comments>A business-friendly OSS license</comments>
		</license>
	</licenses>

	<developers>
		<developer>
			<id>willp-bl</id>
			<name>William Palmer</name>
			<email>william.palmer@bl.uk</email>
			<url>http://www.scape-project.eu/</url>
			<organization>British Library / SCAPE Project</organization>
			<timezone>0</timezone>
		</developer>
		<developer>
			<id>alecsg-bl</id>
			<name>Alecs Geuder</name>
			<email>alecs.geuder@bl.uk</email>
			<url>http://www.scape-project.eu/</url>
			<organization>British Library / SCAPE Project</organization>
			<timezone>0</timezone>
		</developer>
	</developers>

</project>
